:========================================================================
: SQL Server and Azure SQL
:========================================================================

:........................................................................
: *** Create tables ***

: Run '01-Create tables.sql'


:........................................................................
: *** Initialize the configuration file ***

md c:\temp\sql
cd c:\temp\sql

dab init --database-type "mssql" --connection-string "[CONNECTION-STRING]" --host-mode "Development"


:........................................................................
: *** Querying tables ***

: Add entities for the dbo.Book and dbo.Author tables
dab add Book --source dbo.Book --permissions "anonymous:*"
dab add Author --source dbo.Author --permissions "anonymous:*"

dab start

: http://localhost:5000/api/Book

: http://localhost:5000/graphql
:	Opens Nitro (a GraphQL IDE)
:	Click "Browse schema"
:	View "Query" types
:		See Query operations for Book and Author, with pagination, filter, and orderBy controls
:	View "Mutation" types
:		See CUD operations for Book and Author

: Switch to Postman
:	For REST, can do POST, PUT, PATCH, DELETE (just just GET), and view formatted JSON
:	For GraphQL, can run queries and mutations same as Nitro
:
: Run "Querying tables" Postman demos
:	REST
:		Show generated T-SQL for "Get all books"
:	GraphQL
:		Relationship queries will fail; add entity relationships to make them work


:........................................................................
: *** Querying multiple tables via relationships ***

: Add many-to-many relationships for the dbo.Book and dbo.Author tables
dab update Book --relationship "Authors" --cardinality "many" --target.entity "Author" --linking.object "dbo.BookAuthor"
dab update Author --relationship "Books" --cardinality "many" --target.entity "Book" --linking.object "dbo.BookAuthor"

dab start

: See relationship discovery queries during startup

: Run GraphQL relationship queries
:	See OUTER APPLY and INNER JOIN generated for the SQL statement


:........................................................................
: *** Updating tables ***

: Run "Updating tables" Postman demos
:	REST & GraphQL
:		See generated T-SQL for "Create a book"


:........................................................................
: *** Querying views ***

: Run '02-Create view.sql'

: Add entity for the dbo.BookDetail view
dab add BookDetail --source dbo.vwBookDetails --source.type View --source.key-fields "BookId" --permissions "anonymous:*"

dab start

: Run "Querying views" Postman demos
:	REST & GraphQL


:........................................................................
: *** Running stored procedures ***

: Run '03-Create stored procedure.sql'

: Add entity for the dbo.GetBooksCowrittenByAuthor stored procedure accessible via GET
dab add GetBooksCowrittenByAuthor --source dbo.GetBooksCowrittenByAuthor --source.type "stored-procedure" --source.params "SearchType:C,Author:" --permissions "anonymous:execute" --rest.methods "get" --graphql.operation "query"

dab start

: Run "Calling stored procedures" Postman demos
:	REST & GraphQL
:		See generated T-SQL for first stored procedure call

: Also support POST
:	Edit dab-config.json and add "POST" to the rest methods array

dab start


:========================================================================
: Security
:========================================================================

:........................................................................
: *** Simple (non-role based) authentication with StaticWebApps and Simulator ***

: Change book permissions
:  Replace anonymous role name as "authenticated", and append a comma to add the revised "anonymous" role:

	{
		"role": "anonymous",
		"actions": [
			{
				"action": "Read",
				"policy": {
					"database": "@item.Year ge 2000"
				}
			}
		]
	}

dab start

: Run Postman demos (REST & GraphQL)
:	"Get all books", can only see books with year >= 2000
:	"Create a book", fails with unauthorized
:	"Get all authors", can still see all authors


: Change runtime host authentication
:  Replace "StaticWebApps" with "Simulator"

dab start

: Run Postman demos (REST & GraphQL)
:	"Get all books", can see all books
:	"Create a book", succeeds, creates book ID 1023


:........................................................................
: *** Microsoft Entra ID ***

: Change runtime host authentication
:  Replace "Simulator" with "AzureAD", and add the "jwt" property beneath "provider"

	"jwt": {
		"issuer": "https://login.microsoftonline.com/d094d040-1e16-4c87-9d7e-ba1b8efa9b29/v2.0",
		"audience": "ebe1e801-3ce2-4c70-ba3b-b6d3008532e0"
	}

: Change book permissions
:  Replace existing roles with:

	{
		"role": "Book.Reader",
		"actions": [ "read" ]
	},
	{
		"role": "Book.Librarian",
		"actions": [ "*" ]
	}

dab start

: Run Postman demos (REST, anonymous)
:	"Get all books", fails with 403
:	"Create a book", fails with 403
:	"Get all authors", succeeds (unsecured entity)

: ME-ID configuration in Azure portal
:	Switch to DAB Library directory
:	Open Azure Active Directory page
:	Click App registrations on sidebar
:		Click Data API Builder Demo
:		Click Manage > App roles on sidebar
:		Note two roles
:			Book Readers (Book.Reader)
:			Book Librarians (Book.Librarian)
:		Click browser back
:		Click Manage > Expose an API on sidebar
:			Click the scope
:			Note full scope name (we will request a token for this scope)
:				api://ebe1e801-3ce2-4c70-ba3b-b6d3008532e0/Endpoint.Access
:		Click browser back 2x
:	Click Enterprise applications on sidebar
:		Click Data API Builder Demo
:		Click Manage > Users and groups on sidebar
:		Note two users with different roles
:			Jim Librarian
:			Joe Reader

: New Azure CLI command prompt

: Login as Joe Reader (UID=joe.reader@dablibrary.onmicrosoft.com, PWD=JoeLikesToRead!!)
az login --allow-no-subscriptions --scope https://management.core.windows.net//.default

: Obtain an access token
az account get-access-token --scope api://ebe1e801-3ce2-4c70-ba3b-b6d3008532e0/Endpoint.Access

: Decode token in https://jwt.ms/
:	Notice Book.Reader in the roles claim

: Run Postman demos
:	Open "Get all books"
:		Click Headers
:			Check Authorization and paste in the bearer token over ey...
:			Check X-MS-API-ROLE and paste in Book.Reader over ...
:		Run it
:			Succeeds, returns all books
:	Open "Create a book"
:		Click Headers
:			Check Authorization and paste in the bearer token over ey...
:			Check X-MS-API-ROLE and paste in Book.Reader over ...
:		Run it
:			Fails with 403
:		Change X-MS-API-ROLE to Book.Librarian
:		Run it
:			Fails with 403 (but without JSON response; user doesn't have that role assignment)

: Logout Joe Reader
az logout

: Login as Jim Librarian (UID=jim.librarian@dablibrary.onmicrosoft.com, PWD=JimWorksAtTheLibrary!!)
az login --allow-no-subscriptions --scope https://management.core.windows.net//.default

: Obtain an access token
az account get-access-token --scope api://ebe1e801-3ce2-4c70-ba3b-b6d3008532e0/Endpoint.Access

: Decode token in https://jwt.ms/
:	Notice Book.Librarian in the roles claim

: Run Postman demos
:	Open "Get all books"
:		Click Headers
:			For Authorization, replace bearer token
:			For X-MS-API-ROLE, replace with Book.Librarian
:		Run it
:			Succeeds, returns all books
:	Open "Create a book"
:		Click Headers
:			For Authorization, replace bearer token
:			For X-MS-API-ROLE, still set to Book.Librarian from previous attempt
:		Run it
:			Succeeds, creates book ID 1024


:........................................................................
: *** Row-level security (RLS) ***

: Run '04-DAB with RLS.sql'

: Add entity for the dbo.Branch table
dab add Branch --source dbo.Branch --permissions "anonymous:*"

: Add entity for the dbo.GetSessionContextValues stored procedure to examine JWT token claims in SESSION_CONTEXT
dab add GetSessionContextValues --source dbo.GetSessionContextValues --source.type "stored-procedure" --permissions "anonymous:execute" --rest.methods "get" --graphql.operation "query"

: Edit configuration
:	Set set-session-context to true

dab start

: Run Postman demos
:	Open "Get all branches"
:		Run it
:			Returns 0 branches
:	Open "Get SESSION_CONTEXT values"
:		Run it
:			Returns null values for Anonymous
:		Click Headers
:			Check Authorization and paste in the bearer token over ey...
:		Run it
:			Returns JWT token claims
:	Open "Get all branches"
:		Click Headers
:			Check Authorization and paste in the bearer token over ey...
:		Run it
:			Returns only the branches for Jim Librarian
:	Open "Create a branch"
:		Click Headers
:			Check Authorization and paste in the bearer token over ey...
:		Run it
:			Fails with a block predicate (new branch is for Jane, not Jim)
:		Update the request body
:			Change jane.librarian@... to jim.librarian@...
:		Run it
:			Succeeds, cerates new branch
:	Open "Get all branches"
:		Run it
:			Returns only the branches for Jim Librarian, including the new one
